name: 'lambda CICD(development)'
on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development
jobs:  
  run_terraform:
    name: 'Deploy and test a lambda function'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      LambdaFunctionName: "lv-security-lambda-security-alert-dev"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Setup AWS credentals
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: create zip
        working-directory: src
        run: zip -r ../package.zip .

      - name: update function code
        run: aws lambda update-function-code --function-name ${{env.LambdaFunctionName}} --zip-file fileb://package.zip --no-publish

      - name: test a lambda function(shared accounts)
        run: aws lambda invoke --function-name lv-security-lambda-security-alert-dev --payload fileb://test_payload_777777777777.json response.json

      - name: test a lambda function(other accounts)
        run: aws lambda invoke --function-name lv-security-lambda-security-alert-dev --payload fileb://test_payload_888888888888.json response.json

      - name: test a lambda function(resource accounts)
        run: aws lambda invoke --function-name lv-security-lambda-security-alert-dev --payload fileb://test_payload_999999999999.json response.json

      - name: Create a pull request merging to main branch
        uses: actions/github-script@v2
        env:
          BRANCH: ${{ steps.get_branch.outputs.BRANCH }}
          VERSION: ${{ steps.bump_version.outputs.VERSION }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore(*): bump v${process.env.VERSION}`,
              body: `version: ${process.env.BRANCH}`,
              head: process.env.BRANCH,
              base: "production"
            })